import os
from .base import BaseCommand


class Command(BaseCommand):

    def _write_configuration_to_file(self, username, password, dbname, tablename):
        if os.path.exists(self._get_configuration_file_path()):
           self.error(
            "the configuration file at '%s' already exists" %
                self._get_configuration_file_path()) 
        else:
            with open(self._get_configuration_file_path(), 'wx') as f:
                # we want only to create the file
                pass

        with self._get_configuration_file(mode='w') as f:
            f.write('''# autogenerated file edit at your own risk
username=%s
password=%s
dbname=%s
tablename=%s''' % (username, password, dbname, tablename))

    def next_step(self, **params):
        params['configuration_file_path'] = self._get_configuration_file_path()
        return '''
Configuration file successfully created at

    %(configuration_file_path)s

You can now create the database and the user with the following commands

 # su postgres
 $ createuser -U postgres %(username)s --no-superuser --no-createdb --no-createrole
 $ psql -U postgres -c "alter role %(username)s with password '%(password)s';"
 $ createdb -U postgres -O %(username)s %(dbname)s
''' % params

    #TODO: hash password also in the config file
    def handle(self, *args):
        username = args[0]
        password = args[1]
        dbname   = args[2]
        tablename = args[3]

        self._create_configuration_dir()

        self._write_configuration_to_file(username, password, dbname, tablename)

        print self.next_step(**{'username': username, 'password': password, 'dbname': dbname, 'tablename': tablename})
